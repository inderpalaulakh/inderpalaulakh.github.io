<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kotlin on Learner</title>
    <link>https://inderpalaulakh.com/tags/kotlin/</link>
    <description>Recent content in Kotlin on Learner</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 10 May 2021 14:27:12 -0700</lastBuildDate><atom:link href="https://inderpalaulakh.com/tags/kotlin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kotlin map, foldRight &amp; nested functions to implement redux middleware</title>
      <link>https://inderpalaulakh.com/posts/middlewarekotlin/</link>
      <pubDate>Mon, 10 May 2021 14:27:12 -0700</pubDate>
      
      <guid>https://inderpalaulakh.com/posts/middlewarekotlin/</guid>
      <description>Kotlin supports Higher order functions. In this blog, I will create a higher order function that will use map &amp;amp; fold right for execution.
Before diving into higher order functions, let&amp;rsquo;s go through map &amp;amp; fold right.
map is collective transform operation.
var numbers = mutableListOf(1, 2, 3)numbers = numbers.map { it*2 }.toMutableList()// elements in numbers: 2,4,6 foldRight accept initial state, apply initial state to all elements and return final state.
var numbers = mutableListOf(1, 2, 3)var result = numbers.foldRight(100, {a,b -&amp;gt; test(a,b)})private fun test(a: Int, b: Any): Int {return a + b as Int}/*First execution: initial 100a = 3b = 100Second Executiona = 2b = 103Third Executiona = 1b = 105final: result = 106*/ Let&amp;rsquo;s create a higher order function Middleware that takes an instance StringApp, has inner function next: Type and return Type.</description>
    </item>
    
    <item>
      <title>Dagger, Injecting custom objects (Interface implementation)</title>
      <link>https://inderpalaulakh.com/posts/dicustom/</link>
      <pubDate>Sun, 02 May 2021 00:00:29 -0700</pubDate>
      
      <guid>https://inderpalaulakh.com/posts/dicustom/</guid>
      <description>It is very connivent to use any DI framework when all the objects required are available in application. For example, I have two classes Logger, Service and class Middleware is dependent on these classes.
class Logger()class Service()//this class requires Logger &amp;amp; Service objectclass Middleware(private val logger:Logger. private val service:Service)// middleware objectval middleware = Middleware(Logger(),Service()) Dagger can build objects of Logger and Service classes by indicating @Inject annotation to all three classes
internal class Logger @Inject constructor()internal class Service @Inject constructor()//this class requires Logger &amp;amp; Service objectinternal class Middleware @Inject constructor(private val logger:Logger.</description>
    </item>
    
    <item>
      <title>Android/Java Dependency Injection Frameworks (Android Library &amp; App Development)</title>
      <link>https://inderpalaulakh.com/posts/di/</link>
      <pubDate>Mon, 12 Apr 2021 10:46:57 -0800</pubDate>
      
      <guid>https://inderpalaulakh.com/posts/di/</guid>
      <description>Below are widely used Dependency Injection frameworks mostly by android &amp;amp; Java application projects.
For Android application development, the suggested Framework by Google are Dagger and Hilt. These frameworks help to avoid writing boilerplate code.
Guice Guice (pronounced &amp;lsquo;juice&amp;rsquo;) is a lightweight dependency injection framework for Java 6 and above, brought to you by Google. (github.com)
With 10K stars this framework is mostly used by Java developers where Java is used for backend &amp;amp; Application development.
For Android, this framework is not suggested as this framework use reflections to scan annotations from code. This requires significant CPU cycles and RAM thus slowdowns application launch.</description>
    </item>
    
  </channel>
</rss>

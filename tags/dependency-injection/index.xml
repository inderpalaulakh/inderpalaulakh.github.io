<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dependency Injection on Learner</title>
    <link>https://inderpalaulakh.com/tags/dependency-injection/</link>
    <description>Recent content in Dependency Injection on Learner</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 02 May 2021 00:00:29 -0700</lastBuildDate><atom:link href="https://inderpalaulakh.com/tags/dependency-injection/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dagger, Injecting custom objects (Interface implementation)</title>
      <link>https://inderpalaulakh.com/posts/dicustom/</link>
      <pubDate>Sun, 02 May 2021 00:00:29 -0700</pubDate>
      
      <guid>https://inderpalaulakh.com/posts/dicustom/</guid>
      <description>It is very connivent to use any DI framework when all the objects required are available in application. For example, I have two classes Logger, Service and class Middleware is dependent on these classes.
class Logger()class Service()//this class requires Logger &amp;amp; Service objectclass Middleware(private val logger:Logger. private val service:Service)// middleware objectval middleware = Middleware(Logger(),Service()) Dagger can build objects of Logger and Service classes by indicating @Inject annotation to all three classes
internal class Logger @Inject constructor()internal class Service @Inject constructor()//this class requires Logger &amp;amp; Service objectinternal class Middleware @Inject constructor(private val logger:Logger.</description>
    </item>
    
  </channel>
</rss>

[{"content":"Last week, I read an article \u0026ldquo;Harnessing the Power of Less\u0026rdquo; published in Special Times Edition \u0026ldquo;Secrets of Success\u0026rdquo;.\nThe beautiful line \u0026ldquo;Stretching encourages adaptation and working with what you already have, rather than focusing on needing more\u0026rdquo; from the article daunted me to rewire my burned out brain.\nThe article has an exercise to ask self a question: What can I do with what I have? As usual, instead of working on this question, I modified question to: What task I want to do? What skills I already have to complete the task?\nWhat skills I do not have to complete the task?\nBy now, I know the questions that I need to answer to save my burned out brain.\nThank God, I know the task I want to do 😌. I will write a series of blog posts to answer the questions.\n  ","date":"20 Jun 21","permalink":"https://inderpalaulakh.com/posts/thepowerofless/","tags":null,"title":"Harnessing the Power of Less"},{"content":"Kotlin supports Higher order functions. In this blog, I will create a higher order function that will use map \u0026amp; fold right for execution.\nBefore diving into higher order functions, let\u0026rsquo;s go through map \u0026amp; fold right.\nmap is collective transform operation.\nvar numbers = mutableListOf(1, 2, 3)\rnumbers = numbers.map { it*2 }.toMutableList()\r// elements in numbers: 2,4,6\r foldRight accept initial state, apply initial state to all elements and return final state.\nvar numbers = mutableListOf(1, 2, 3)\rvar result = numbers.foldRight(100, {a,b -\u0026gt; test(a,b)})\rprivate fun test(a: Int, b: Any): Int {\rreturn a + b as Int\r}\r/*\rFirst execution: initial 100\ra = 3\rb = 100\rSecond Execution\ra = 2\rb = 103\rThird Execution\ra = 1\rb = 105\rfinal: result = 106\r*/\r Let\u0026rsquo;s create a higher order function Middleware that takes an instance StringApp, has inner function next: Type and return Type.\ntypealias Type = (value: String) -\u0026gt; Unit\rtypealias Middleware = (stringApp: StringApp) -\u0026gt; (next: Type) -\u0026gt; Type\r Now, create three classes that implements Middleware.\nclass MiddlewareA : Middleware {\roverride fun invoke(stringApp: StringApp) = { next: Type -\u0026gt;\r{ value: String -\u0026gt;\rnext(\u0026quot;$value MiddlewareA \u0026quot;)\r}\r}\r}\rclass MiddlewareB : Middleware {\roverride fun invoke(stringApp: StringApp) = { next: Type -\u0026gt;\r{ value: String -\u0026gt;\rnext(\u0026quot;$value MiddlewareB \u0026quot;)\r}\r}\r}\rclass MiddlewareC : Middleware {\roverride fun invoke(stringApp: StringApp) = { next: Type -\u0026gt;\r{ value: String -\u0026gt;\rnext(\u0026quot;$value MiddlewareC \u0026quot;)\r}\r}\r}\r StringApp class receives list of middlewares and call dispatch to execute higher order function.\nclass StringApp(private val middlewares: MutableList\u0026lt;Middleware\u0026gt;) {\rprivate fun reduce(value: String) {\rval result = value;\r// result = }\rfun dispatch(value: String) {\rvar dispatch2 = middlewares[2](this)(::reduce)\rvar dispatch1 = middlewares[1](this)(dispatch2)\rmiddlewares[0](this)(dispatch1)(value)\r}\r}\r The higher order function can be written as below:\nval app = StringApp(mutableListOf(MiddlewareA(), MiddlewareB(), MiddlewareC()))\rapp.dispatch(\u0026quot;init\u0026quot;)\r{\rmiddlewareC -\u0026gt; set string value to \u0026quot;init middleware A middleware B middleware C\u0026quot;\r{\rmiddlewareB -\u0026gt; set string value to \u0026quot;init middleware A middleware B\u0026quot;\r{\rmiddlewareA -\u0026gt; set string value to \u0026quot;init middleware A\u0026quot;\r}\r}\r}\r Let\u0026rsquo;s use map \u0026amp; fold right to execute higher order function.\nclass StringApp(middlewares: MutableList\u0026lt;Middleware\u0026gt;) {\r// map inject store reference to all middleware functions\rprivate val middlewareMap: List\u0026lt;(Type) -\u0026gt; Type\u0026gt; = middlewares.map { m -\u0026gt; m.invoke(this) }\r/*\r// now below code execution required to achieve result\rvar dispatch2 = middlewareMap[2](::reduce)\rvar dispatch1 = middlewareMap[1](dispatch2)\rmiddlewareMap[0](dispatch1)(value)\r*/\rvar middlewareDispatch = compose(middlewareMap)(::reduce)\r// traverse through middlewares\r// build middleware chain by injecting dispatch from previous middleware\r// inject ::reduce to last middleware\rprivate fun compose(functions: List\u0026lt;(Type) -\u0026gt; Type\u0026gt;): (Type) -\u0026gt; Type =\r{ dispatch -\u0026gt;\rfunctions.foldRight(\rdispatch,\r{ nextDispatch, composed -\u0026gt; nextDispatch(composed) })\r}\rprivate fun reduce(value: String) {\rval result = value;\r}\rprivate fun dispatch(value: String) {\rmiddlewareDispatch(value)\r}\r}\r I learned map \u0026amp; fold while implementing redux middleware concepts from library kotlin-redux.\nUsing higher order functions for middleware helps to stop middleware chain execution. If a middleware subscribes to service, on async callback the middleware can finish the work without invoking next middleware.\n","date":"10 May 21","permalink":"https://inderpalaulakh.com/posts/middlewarekotlin/","tags":["Kotlin","Redux","Middleware"],"title":"Kotlin map, foldRight \u0026 nested functions to implement redux middleware"},{"content":"It is very connivent to use any DI framework when all the objects required are available in application. For example, I have two classes Logger, Service and class Middleware is dependent on these classes.\nclass Logger()\rclass Service()\r//this class requires Logger \u0026amp; Service object\rclass Middleware(private val logger:Logger. private val service:Service)\r// middleware object\rval middleware = Middleware(Logger(),Service())\r Dagger can build objects of Logger and Service classes by indicating @Inject annotation to all three classes\ninternal class Logger @Inject constructor()\rinternal class Service @Inject constructor()\r//this class requires Logger \u0026amp; Service object\rinternal class Middleware @Inject constructor(private val logger:Logger. private val service:Service)\r@Component\rinterface MiddlewareComponent {\rfun buildComponent():Middleware\r}\r// middleware object\rval middleware = DaggerMiddlewareComponent.builder().build().buildComponent()\r If the project requirements are modified to get Logger with custom implementation, we can write @Module to support dependency injection.\n// now, Logger is interface\rinterface Logger class Service @Inject constructor()\rclass Middleware @Inject constructor(val logger: Logger, val service: Service)\r@Module\rclass LoggerModule constructor(val logger: Logger) {\r@Provides\rfun providesLogger(): Logger {\rreturn logger\r}\r}\r@Component(modules = [LoggerModule::class])\rinterface MiddlewareComponent {\rfun buildComponent(): Middleware\r}\r//custom implementation\rclass NullLogger : Logger\r//injecting logger module with interface implementation\rval middleware = DaggerMiddlewareComponent.builder().loggerModule(LoggerModule(NullLogger())).build().buildComponent()\r ","date":"02 May 21","permalink":"https://inderpalaulakh.com/posts/dicustom/","tags":["Android","Kotlin","Dependency Injection"],"title":"Dagger, Injecting custom objects (Interface implementation)"},{"content":"Below are widely used Dependency Injection frameworks mostly by android \u0026amp; Java application projects.\nFor Android application development, the suggested Framework by Google are Dagger and Hilt. These frameworks help to avoid writing boilerplate code.\nGuice Guice (pronounced \u0026lsquo;juice\u0026rsquo;) is a lightweight dependency injection framework for Java 6 and above, brought to you by Google. (github.com)\nWith 10K stars this framework is mostly used by Java developers where Java is used for backend \u0026amp; Application development.\nFor Android, this framework is not suggested as this framework use reflections to scan annotations from code. This requires significant CPU cycles and RAM thus slowdowns application launch.\nReflection on the desktop/server JVM is very efficient, and even very large Guice applications don\u0026rsquo;t have performance problems related to Guice.\nManage your app\u0026rsquo;s memory | Android Developers : Other dependency injection frameworks that use reflection tend to initialize processes by scanning your code for annotations. This process can require significantly more CPU cycles and RAM and can cause a noticeable lag when the app launches.\nDagger Dagger is an open source Guice alternative designed to run efficiently on Android.\nNo doubt, Dagger makes life easier, for Android Library development this seems to cause issue if Application include library that use different version of Dagger. (Note: Gradle use latest version of library if library has multiple versions in Application.)\nDagger is a fully static, compile-time dependency injection framework for Java, Kotlin, and Android. The dependency of Dagger is not included to .aar for Android Library.\nlisted issue: android - Dagger 2. Library and app has different version Compilation issues after moving to 2.34 from 2.33 - Hilt · Issue #2541 · google/dagger\nHilt (Beta) Hilt is built on top of the popular DI library Dagger to benefit from the compile-time correctness, runtime performance, scalability, and Android Studio support that Dagger provides.\nAndroid app requires you to write a substantial amount of boilerplate. Hilt reduces the boilerplate code that is involved in using Dagger in an Android application. Hilt automatically generates and provides the following:\n Components for integrating Android framework classes with Dagger that you would otherwise need to create by hand. Scope annotations to use with the components that Hilt generates automatically. Predefined bindings to represent Android classes such as Application or Activity. Predefined qualifiers to represent @ApplicationContext and @ActivityContext.  Dependency injection with Hilt | Android Developers\nTo compare Hilt \u0026amp; Dagger read Dependency injection on Android with Hilt.\nServiceLocator The service locator design pattern also improves decoupling of classes from concrete dependencies. You create a class known as the service locator that creates and stores dependencies and then provides those dependencies on demand.\nclass ServiceLocator {\rprivate static ServiceLocator instance = null;\rprivate ServiceLocator() {}\rpublic static ServiceLocator getInstance() {\rif (instance == null) {\rsynchronized(ServiceLocator.class) {\rinstance = new ServiceLocator();\r}\r}\rreturn instance;\r}\rpublic Engine getEngine() {\rreturn new Engine();\r}\r}\rclass Car {\rprivate Engine engine = ServiceLocator.getInstance().getEngine();\rpublic void start() {\rengine.start();\r}\r}\rclass MyApp {\rpublic static void main(String[] args) {\rCar car = new Car();\rcar.start();\r}\r}\r Summary In my opinion, the DI library choice becomes easy once we decide the Android Library delivery method.\n .aar: if the project requirement is to share .aar with developers, Dagger is good choice as it is compile time and has capabilities to get custom objects from application. Source Code: if we are going to share code with developers and Android library is injected into application as source project then Service Locator pattern is good choice for Android Library development as we do not want to inject dependencies to library that can cause conflicts with application’s dependencies. Another drawback is maintaince required to test/update library when new version of Hilt or Dagger is released.  ","date":"12 Apr 21","permalink":"https://inderpalaulakh.com/posts/di/","tags":["Android","Java","Kotlin","Guice","Hilt","Dagger","Service Locator"],"title":"Android/Java Dependency Injection Frameworks (Android Library \u0026 App Development)"},{"content":"Redis is in-memory data structure store. Redis has a really good documentation to learn and implement framework capabilities. \nMy mentor at Job guided me to learn Redis. My primary focus is to understand how Redis helps for Distributed Caching.\nDistributed Caching Distributed Caching is cache shared by multiple servers. The miclsroservices or services can keep it\u0026rsquo;s own cache for data but distributed cache has many advantages as we can scale and manage cache at one place.\nThe caches are used to save time to reduce cost to read database from database. The in memory(RAM cache) data is much more efficient to perform read operations as compared to SQL databases. \nRedis supports distributed caching by clusters. Twitter has redis instance for every user across data centers. When a tweet comes, the tweet is inserted into redis cache instance of every user who follows the tweet owner Real Time Delivery Twitter. Distributing caching helps twitter to deliver 300k tweets/sec.\n\n","date":"25 Mar 21","permalink":"https://inderpalaulakh.com/posts/redis/","tags":["Redis","Distributed caching"],"title":"Distributed caching - Redis"},{"content":"Recently, I developed an Android application. The application was developed focusing on simplicity. The application was small thus skipped writing unit tests. I know skipping the unit tests is not a good practice.\nIn past, I was working on backend projects where tons of unit tests exists for API\u0026rsquo;s. I am new to application development and spent some time to learn about MVC and MVVM design patterns.\nFor next project, the preference is MVVM. At end of this post I will share the reason to choose MVVM.\nThe example code for this post is written for Android application.\nMVC (Model-View-Controller) Model: Model is data layer. Model call services or database to get data from external systems. View: View is user interface layer. Controller: Controller is triggered first. Controller has reference to Model as well as View. Controller get data from Model and send to View.\nI developed a sample application to demonstrate MVC. This application populates ListView on Button click.\n\nFolder Structure  User.java\npublic class User {\rprivate String name;\rpublic User(String name) {\rthis.name = name;\r}\rpublic String getName() {\rreturn name;\r}\r}\r UserModel.java\npublic class UserModel{\rprivate final ArrayList\u0026lt;User\u0026gt; userList;\rpublic UserModel(){\ruserList = new ArrayList\u0026lt;User\u0026gt;();\r// get users from database\ruserList.add(new User(\u0026quot;Ram\u0026quot;));\ruserList.add(new User(\u0026quot;Devin\u0026quot;));\ruserList.add(new User(\u0026quot;Sham\u0026quot;));\ruserList.add(new User(\u0026quot;Inder\u0026quot;));\ruserList.add(new User(\u0026quot;David\u0026quot;));\ruserList.add(new User(\u0026quot;Kaur\u0026quot;));\r}\rpublic ArrayList\u0026lt;User\u0026gt; getUsers() {\rreturn userList;\r}\r}\r UserController.java Controller has instances of both Model \u0026amp; View. Controller get data from Model \u0026amp; update view.\npublic class UserController {\rprivate final UserModel userModel;\rprivate final UserView userView;\rpublic UserController(UserView userView) {\rthis.userModel = new UserModel();\rthis.userView = userView;\r}\rpublic void getUsers() {\ruserView.displayUsers(userModel.getUsers());\r}\r}\r UserView.java UserView create instance of Controller. This class handles button clicks from UI.\npublic class UserView {\rView userView;\rUserController userController;\rButton getUsersButton;\rListView usersListView;\rpublic UserView(Context context, ViewGroup container) {\ruserView = LayoutInflater.from(context).inflate(R.layout.activity_main, container, false);\ruserController = new UserController(this);\r}\rpublic void initView() {\rgetUsersButton = userView.findViewById(R.id.button);\rgetUsersButton.setOnClickListener(l -\u0026gt; {\ruserController.getUsers();\r});\rusersListView = userView.findViewById(R.id.user_list_view);\r}\rpublic void displayUsers(ArrayList\u0026lt;User\u0026gt; users) {\rUsersAdapter adapter = new UsersAdapter(userView.getContext(), users);\rusersListView.setAdapter(adapter);\r}\rpublic View getRootView() {\rreturn userView;\r}\r}\rclass UsersAdapter extends ArrayAdapter\u0026lt;User\u0026gt; {\rpublic UsersAdapter(Context context, ArrayList\u0026lt;User\u0026gt; users) {\rsuper(context, 0, users);\r}\r@Override\rpublic View getView(int position, View convertView, ViewGroup parent) {\rUser user = getItem(position);\rif (convertView == null) {\rconvertView = LayoutInflater.from(getContext()).inflate(R.layout.list_view_item, parent, false);\r}\rTextView tvName = (TextView) convertView.findViewById(R.id.user_name);\rtvName.setText(user.getName());\rreturn convertView;\r}\r}\r MainActivity.java MainActivity creates UserView instance.\npublic class MainActivity extends AppCompatActivity {\rUserView userView;\r@Override\rprotected void onCreate(Bundle savedInstanceState) {\rsuper.onCreate(savedInstanceState);\ruserView = new UserView(MainActivity.this, null);\rsetContentView(userView.getRootView());\ruserView.initView();\r}\r}\r activity_main.xml\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;utf-8\u0026quot;?\u0026gt;\r\u0026lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\u0026quot;http://schemas.android.com/apk/res/android\u0026quot;\rxmlns:app=\u0026quot;http://schemas.android.com/apk/res-auto\u0026quot;\rxmlns:tools=\u0026quot;http://schemas.android.com/tools\u0026quot;\randroid:layout_width=\u0026quot;match_parent\u0026quot;\randroid:layout_height=\u0026quot;match_parent\u0026quot;\rtools:context=\u0026quot;.MainActivity\u0026quot;\u0026gt;\r\u0026lt;ListView\randroid:id=\u0026quot;@+id/user_list_view\u0026quot;\randroid:layout_width=\u0026quot;match_parent\u0026quot;\randroid:layout_height=\u0026quot;match_parent\u0026quot;\randroid:layout_marginTop=\u0026quot;90dp\u0026quot;\rapp:layout_constraintBottom_toBottomOf=\u0026quot;parent\u0026quot;\rapp:layout_constraintEnd_toEndOf=\u0026quot;parent\u0026quot;\rapp:layout_constraintStart_toStartOf=\u0026quot;parent\u0026quot;\rapp:layout_constraintTop_toTopOf=\u0026quot;parent\u0026quot; \u0026gt;\r\u0026lt;/ListView\u0026gt;\r\u0026lt;Button\randroid:id=\u0026quot;@+id/button\u0026quot;\randroid:layout_width=\u0026quot;wrap_content\u0026quot;\randroid:layout_height=\u0026quot;wrap_content\u0026quot;\randroid:layout_marginStart=\u0026quot;151dp\u0026quot;\randroid:layout_marginTop=\u0026quot;5dp\u0026quot;\randroid:layout_marginEnd=\u0026quot;146dp\u0026quot;\randroid:layout_marginBottom=\u0026quot;24dp\u0026quot;\randroid:text=\u0026quot;Get Users\u0026quot;\rapp:layout_constraintBottom_toTopOf=\u0026quot;@+id/user_list_view\u0026quot;\rapp:layout_constraintEnd_toEndOf=\u0026quot;parent\u0026quot;\rapp:layout_constraintStart_toStartOf=\u0026quot;parent\u0026quot;\rapp:layout_constraintTop_toTopOf=\u0026quot;parent\u0026quot; /\u0026gt;\r\u0026lt;/androidx.constraintlayout.widget.ConstraintLayout\u0026gt;\r list_view_item.xml\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;utf-8\u0026quot;?\u0026gt;\r\u0026lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\u0026quot;http://schemas.android.com/apk/res/android\u0026quot;\rxmlns:app=\u0026quot;http://schemas.android.com/apk/res-auto\u0026quot;\rxmlns:tools=\u0026quot;http://schemas.android.com/tools\u0026quot;\randroid:layout_width=\u0026quot;match_parent\u0026quot;\randroid:layout_height=\u0026quot;match_parent\u0026quot;\rtools:context=\u0026quot;.MainActivity\u0026quot;\u0026gt;\r\u0026lt;TextView\randroid:id=\u0026quot;@+id/user_name\u0026quot;\randroid:layout_width=\u0026quot;wrap_content\u0026quot;\randroid:layout_height=\u0026quot;wrap_content\u0026quot;\randroid:text=\u0026quot;Name\u0026quot; /\u0026gt;\r\u0026lt;/androidx.constraintlayout.widget.ConstraintLayout\u0026gt;\r In above example, controller is not loosely coupled with view. It has both View \u0026amp; Model. View also has controller reference to send receive.\nMVVM (Model-View-ViewModel) Model: Model is data layer. Model call services or database to get data from external systems. View: View is user interface layer. View is triggered first to request controller to get data from Model. View Model: View Model has reference to Model only. ViewModel is loosely coupled with View through livedata or databinding.\nI developed a sample application to demonstrate MVVM. This application populates ListView on Button click.  Folder Structure User.java\npublic class User {\rprivate String name;\rpublic User(String name) {\rthis.name = name;\r}\rpublic String getName() {\rreturn name;\r}\r}\r UserModel.java\npublic class UserModel{\rprivate final ArrayList\u0026lt;User\u0026gt; userList;\rpublic UserModel(){\ruserList = new ArrayList\u0026lt;User\u0026gt;();\r// get users from database\ruserList.add(new User(\u0026quot;Ram\u0026quot;));\ruserList.add(new User(\u0026quot;Devin\u0026quot;));\ruserList.add(new User(\u0026quot;Sham\u0026quot;));\ruserList.add(new User(\u0026quot;Inder\u0026quot;));\ruserList.add(new User(\u0026quot;David\u0026quot;));\ruserList.add(new User(\u0026quot;Kaur\u0026quot;));\r}\rpublic ArrayList\u0026lt;User\u0026gt; getUsers() {\rreturn userList;\r}\r}\r UserViewModel.java UserViewModel has instances of Model. Controller get data from Model and notify live data subscribers.\npublic class UserViewModel extends ViewModel {\rprivate MutableLiveData\u0026lt;ArrayList\u0026lt;User\u0026gt;\u0026gt; userList;\rpublic UserViewModel() {\ruserList = new MutableLiveData\u0026lt;\u0026gt;();\r}\rpublic MutableLiveData\u0026lt;ArrayList\u0026lt;User\u0026gt;\u0026gt; getObserverUserList() {\rreturn userList;\r}\rpublic void getUsers() {\r// notify subscribers\ruserList.postValue((new UserModel()).getUsers());\r}\r}\r MainActivity.java MainActivity creates UserViewModel. UserViewModel triggers live data.\npublic class MainActivity extends AppCompatActivity {\rUserViewModel userViewModel;\rButton getUsersButton;\rListView usersListView;\r@Override\rprotected void onCreate(Bundle savedInstanceState) {\rsuper.onCreate(savedInstanceState);\rsetContentView(R.layout.activity_main);\r// get view model\ruserViewModel = ViewModelProviders.of(this).get(UserViewModel.class);\rgetUsersButton = findViewById(R.id.button);\rgetUsersButton.setOnClickListener(l -\u0026gt; {\ruserViewModel.getUsers();\r});\rusersListView = findViewById(R.id.user_list_view);\r// subscribe to view model\ruserViewModel.getObserverUserList().observe(this, l -\u0026gt; {\rUsersAdapter adapter = new UsersAdapter(this, l);\rusersListView.setAdapter(adapter);\r});\r}\r}\rclass UsersAdapter extends ArrayAdapter\u0026lt;User\u0026gt; {\rpublic UsersAdapter(Context context, ArrayList\u0026lt;User\u0026gt; users) {\rsuper(context, 0, users);\r}\r@Override\rpublic View getView(int position, View convertView, ViewGroup parent) {\rUser user = getItem(position);\rif (convertView == null) {\rconvertView = LayoutInflater.from(getContext()).inflate(R.layout.list_view_item, parent, false);\r}\rTextView tvName = (TextView) convertView.findViewById(R.id.user_name);\rtvName.setText(user.getName());\rreturn convertView;\r}\r}\r list_view_item.xml\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;utf-8\u0026quot;?\u0026gt;\r\u0026lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\u0026quot;http://schemas.android.com/apk/res/android\u0026quot;\rxmlns:app=\u0026quot;http://schemas.android.com/apk/res-auto\u0026quot;\rxmlns:tools=\u0026quot;http://schemas.android.com/tools\u0026quot;\randroid:layout_width=\u0026quot;match_parent\u0026quot;\randroid:layout_height=\u0026quot;match_parent\u0026quot;\rtools:context=\u0026quot;.MainActivity\u0026quot;\u0026gt;\r\u0026lt;TextView\randroid:id=\u0026quot;@+id/user_name\u0026quot;\randroid:layout_width=\u0026quot;wrap_content\u0026quot;\randroid:layout_height=\u0026quot;wrap_content\u0026quot;\randroid:text=\u0026quot;Name\u0026quot; /\u0026gt;\r\u0026lt;/androidx.constraintlayout.widget.ConstraintLayout\u0026gt;\r In above example, controller is loosely coupled with view. It has only Model. Controller has no information of view.\nNote: The data bindings can be used for loose coupling.\nFinally My purpose to use design patterns is to write unit testable and maintainable code. As MVVM ViewModel is loosely coupled with View. I can write unit tests for Model \u0026amp; ViewModel without referencing View. In future, many new modules will be integrated to project. Considering all these requirement, I will consider MVVM.\n","date":"24 Mar 21","permalink":"https://inderpalaulakh.com/posts/mvcmvvm/","tags":["MVC","MVVM","Android","Design Pattern"],"title":"MVC \u0026 MVVM Android Design Pattern (Android)"},{"content":"We can make our code snippets more interesting and readable by sharing code with color formatting.\nTo turn on colors, just add language short name 😉\nFor C# code, add cs after ```.\n```cs\nwrite your code here\n```\nExample:\nstatic void Main(string[] args)\r{\rLogging logger = new Logging();\rlogger.Log(\u0026quot;login success\u0026quot;);\r}\r ","date":"25 Feb 21","permalink":"https://inderpalaulakh.com/posts/colorcode/","tags":["Hugo","Theme","ColorCode",".md"],"title":"Coding blog with colored code snippets(.md posts)"},{"content":"This design patterns guides to create a wrap around existing class to reuse existing class for a new requirement.\nAssume, I have two logging classes named WriteLogsToLocalFile and WriteLogsToServer.\nclass WriteLogsToLocalFile\r{\rpublic void Log(string fileName, string message)\r{\r//write logs to file }\r}\rclass WriteLogsToServer\r{\rpublic void Log(string urL, string message, string token)\r{\r//call rest API with oAuth // Note: here token is used for oAuth\r}\r}\rstatic void Main(string[] args)\r{\rWriteLogsToLocalFile fileLogs = new WriteLogsToLocalFile();\rfileLogs.Log(\u0026quot;hello.xml\u0026quot;, \u0026quot;login success\u0026quot;);\rWriteLogsToServer serverLogs = new WriteLogsToServer();\rserverLogs.Log(\u0026quot;https://server.logs/upload\u0026quot;, \u0026quot;login success\u0026quot;, \u0026quot;oAuthToken\u0026quot;);\r}\r Here user is manually creating objects to write logs separately to local file and server.My requirement is to create a common class for logging, so that client can call common class. The common class should blindly recurse through list of loggers to log message.\nIn below code, a new interface ILog is not compatible with WriteLogsToLocalFile and WriteLogsToServer. We created WriteLogsToServerAdapter and WriteLogsToServerAdapter. Logging is helper class.\n interface ILog\r{\rvoid Log(string message);\r}\r// this class can not implement interface thus created Adapter\rclass WriteLogsToLocalFile\r{\rpublic void Log(string fileName, string message)\r{\r//write logs to file }\r}\r// this class can not implement interface thus created Adapter\rclass WriteLogsToServer\r{\rpublic void Log(string urL, string message, string token)\r{\r//call rest API with oAuth // Note: here token is used for oAuth\r}\r}\rclass WriteLogsToLocalFileAdapter : ILog\r{\rstring location;\rWriteLogsToLocalFile fileLog = new WriteLogsToLocalFile();\rpublic WriteLogsToLocalFileAdapter(string location)\r{\rthis.location = location;\r}\rpublic void Log(string message)\r{\rfileLog.Log(this.location, message);\r}\r}\rclass WriteLogsToServerAdapter: ILog\r{\rstring oAuthToken;\rstring location;\rWriteLogsToServer serverLogs = new WriteLogsToServer();\rpublic WriteLogsToServerAdapter(string token, string location)\r{\rthis.oAuthToken = token;\rthis.location = location;\r}\rpublic void Log(string message)\r{\rserverLogs.Log(this.location, message, this.oAuthToken);\r}\r}\rclass Logging\r{\rILog fileLogs = new WriteLogsToLocalFileAdapter(\u0026quot;index.log\u0026quot;);\rILog serverLogs = new WriteLogsToServerAdapter(\u0026quot;oAuthToken\u0026quot;, \u0026quot;apiPath\u0026quot;);\rpublic void Log(string message)\r{\rfileLogs.Log(message);\rserverLogs.Log(message);\r}\r}\rstatic void Main(string[] args)\r{\rLogging logger = new Logging();\rlogger.Log(\u0026quot;login success\u0026quot;);\r}\r ","date":"13 Feb 21","permalink":"https://inderpalaulakh.com/posts/adapterdesignpattern/","tags":["Object-Oriented","Design Patterns","Adapter"],"title":"Adapter Design Pattern"},{"content":"Code reviews plays an important role to keep code consistent and readable. Code reviews are conducted to maintain quality and simplicity. The bugs should be taken care by automated tests. Code reviews are the best way to learn coding skills from your team members.\nIn this post, I want to share my opinion on how to write code reviews comments. I read a document Google code review. This document is really helpful to write code reviews comments and how to fix, reply on code review comments.\nThe variable name, function name or class name style formatting This type of comments should be taken care by compile time code validation. For example, Android has checkstyle.\nRename class or variable names When we are suggesting someone to rename something in our code, maybe we can express or thoughts by: why to change name? what are the suggested names?\nCode Refactoring This is especially important part of code review. When you request someone to change approach, please always share the benefits of suggested approach. What is new approach? How new approach benefits over existing approach?\n","date":"09 Feb 21","permalink":"https://inderpalaulakh.com/posts/codereview/","tags":["code review"],"title":"Code Review"},{"content":"The Composite Design pattern is structural design pattern. This design pattern is used when we want to treat a group of objects in same way. The composite design pattern has following elements.\nComponent This is a class that contain all the members that needs to be implemented by all the objects.\nComposite This class is used to add, remove and traverse components.\nLeaf The leaf object in tree structure is defined as leaf element.\nCode Sample I want to print salaries of all employees in my organization with names and designation. The root of organization tree is CEO. The CEO has directors as child composite. The director has managers as child composite. Finally, engineers at level 1 as leaf because no one is reporting them.\n // ignore this, just to print static int i = 0;\rinterface IComponent\r{\rvoid print();\r}\rclass Composite : IComponent\r{\rprivate string name;\rprivate string designation;\rprivate decimal salary;\rprivate List\u0026lt;IComponent\u0026gt; listComponent = new List\u0026lt;IComponent\u0026gt;();\rpublic Composite(String name, String designation, decimal salary)\r{\rthis.name = name;\rthis.designation = designation;\rthis.salary = salary;\r}\rpublic void addComponent(IComponent component)\r{\rlistComponent.Add(component);\r}\rpublic void printDesignation()\r{\rConsole.Write(designation);\rConsole.Write(\u0026quot; \u0026quot;);\r}\rpublic void printName()\r{\rConsole.Write(name);\rConsole.Write(\u0026quot; \u0026quot;);\r}\rpublic void printSalary()\r{\rConsole.Write(salary);\rConsole.Write(\u0026quot; \u0026quot;);\r}\rpublic void print()\r{\rprintName();\rprintDesignation();\rprintSalary();\rConsole.WriteLine(\u0026quot; \u0026quot;);\ri++;\rforeach (var component in listComponent)\r{\rfor(int k =0;k \u0026lt;i; k++)\r{\rConsole.Write(\u0026quot; - \u0026quot;);\r}\rcomponent.print();\r}\r}\r}\rclass Leaf : IComponent\r{\rprivate string name;\rprivate string designation;\rprivate decimal salary;\rpublic Leaf(String name, String designation, decimal salary)\r{\rthis.name = name;\rthis.designation = designation;\rthis.salary = salary;\r}\rpublic void print()\r{\rprintName();\rprintDesignation();\rprintSalary();\rConsole.WriteLine(\u0026quot; \u0026quot;);\r}\rpublic void printDesignation()\r{\rConsole.Write(designation);\rConsole.Write(\u0026quot; \u0026quot;);\r}\rpublic void printName()\r{\rConsole.Write(name);\rConsole.Write(\u0026quot; \u0026quot;);\r}\rpublic void printSalary()\r{\rConsole.Write(salary);\rConsole.Write(\u0026quot; \u0026quot;);\r}\r}\rstatic void Main(string[] args)\r{\rLeaf ram = new Leaf(\u0026quot;Ram\u0026quot;, \u0026quot;SE1\u0026quot;, 1000000);\rLeaf sham = new Leaf(\u0026quot;Sham\u0026quot;, \u0026quot;SE1\u0026quot;, 1000000);\rComposite teamLead = new Composite(\u0026quot;Mohan\u0026quot;, \u0026quot;Team Lead\u0026quot;, 1000000);\rteamLead.addComponent(ram);\rteamLead.addComponent(sham);\rComposite manager = new Composite(\u0026quot;John\u0026quot;, \u0026quot;Manager\u0026quot;, 1000000);\rmanager.addComponent(teamLead);\rComposite director = new Composite(\u0026quot;kuku\u0026quot;, \u0026quot;Director\u0026quot;, 1000000);\rdirector.addComponent(manager);\r//traverse through all\rdirector.print();\r}\r}\r Output:\n kuku Director 1000000\r- John Manager 1000000\r- - Mohan Team Lead 1000000\r- - - Ram SE1 1000000\r- - - Sham SE1 1000000\r ","date":"24 Jan 21","permalink":"https://inderpalaulakh.com/posts/compositedesignpattern/","tags":["Object-Oriented","Design Patterns","Composite"],"title":"Composite Design Pattern"},{"content":"In this post, I am writing about how to setup Azure Active Directory Android application login to access Azure functions protected with Azure Active Directory authentication.\nCreate an Android Application Open Android Studio and create new Project with Empty Activity.\nConfigure project with below settings\nGet SHA1 \u0026amp; package name Open powershell and cd to C:\\Users\u0026lt;username\u0026gt;.android Execute below command, if prompted for password enter android or leave blank\nkeytool -list -v -keystore debug.keystore -alias androiddebugkey -storepass android -keypass android\r Copy SHA1 -\u0026gt; Navigate to https://base64.guru/converter/encode/hex and convert SHA1 to Base64\nCopy package name from AndroidManifest.xml\nNow you have packagename \u0026amp; Base64 SHA1 hash\nSetup Azure Active Directory I followed steps from Register your app under Azure Active Directory (using Android platform settings) to setup AAD.\nLogin to Azure\nOpen AAD\nClick App Registration -\u0026gt; New Registration\nSelect Authentication\nSelect Add a platform\nEnter SHA1 Hash \u0026amp; package name\n Copy Android Configuration Android App Login \u0026amp; Logout implementation I followed steps from Configure your App Service or Azure Functions app to use Azure AD login\nEdit build.gradle and add\nimplementation 'com.microsoft.identity.client:msal:1.4.+'\rpackagingOptions{\rexclude(\u0026quot;META-INF/jersey-module-version\u0026quot;)\r}\r Edit build.gradle and add\n\u0026lt;activity\randroid:name=\u0026quot;com.microsoft.identity.client.BrowserTabActivity\u0026quot;\u0026gt;\r\u0026lt;intent-filter\u0026gt;\r\u0026lt;action android:name=\u0026quot;android.intent.action.VIEW\u0026quot; /\u0026gt;\r\u0026lt;category android:name=\u0026quot;android.intent.category.DEFAULT\u0026quot; /\u0026gt;\r\u0026lt;category android:name=\u0026quot;android.intent.category.BROWSABLE\u0026quot; /\u0026gt;\r\u0026lt;data android:scheme=\u0026quot;msauth\u0026quot;\randroid:host=\u0026quot;com.example.********\u0026quot;\randroid:path=\u0026quot;/GH**********I=\u0026quot; /\u0026gt;\r\u0026lt;/intent-filter\u0026gt;\r\u0026lt;/activity\u0026gt;\r Configure auth_config_single_account.json as below Edit activity_main.xml and add\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;utf-8\u0026quot;?\u0026gt;\r\u0026lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\u0026quot;http://schemas.android.com/apk/res/android\u0026quot;\rxmlns:app=\u0026quot;http://schemas.android.com/apk/res-auto\u0026quot;\rxmlns:tools=\u0026quot;http://schemas.android.com/tools\u0026quot;\randroid:layout_width=\u0026quot;match_parent\u0026quot;\randroid:layout_height=\u0026quot;match_parent\u0026quot;\rtools:context=\u0026quot;.MainActivity\u0026quot;\u0026gt;\r\u0026lt;Button\randroid:id=\u0026quot;@+id/loginButton\u0026quot;\randroid:layout_width=\u0026quot;wrap_content\u0026quot;\randroid:layout_height=\u0026quot;wrap_content\u0026quot;\randroid:layout_marginStart=\u0026quot;157dp\u0026quot;\randroid:layout_marginTop=\u0026quot;46dp\u0026quot;\randroid:layout_marginEnd=\u0026quot;161dp\u0026quot;\randroid:text=\u0026quot;Login\u0026quot;\rapp:layout_constraintEnd_toEndOf=\u0026quot;parent\u0026quot;\rapp:layout_constraintStart_toStartOf=\u0026quot;parent\u0026quot;\rapp:layout_constraintTop_toTopOf=\u0026quot;parent\u0026quot; /\u0026gt;\r\u0026lt;Button\randroid:id=\u0026quot;@+id/signoutButton\u0026quot;\randroid:layout_width=\u0026quot;wrap_content\u0026quot;\randroid:layout_height=\u0026quot;wrap_content\u0026quot;\randroid:layout_marginStart=\u0026quot;153dp\u0026quot;\randroid:layout_marginTop=\u0026quot;82dp\u0026quot;\randroid:layout_marginEnd=\u0026quot;159dp\u0026quot;\randroid:text=\u0026quot;Signout\u0026quot;\rapp:layout_constraintEnd_toEndOf=\u0026quot;parent\u0026quot;\rapp:layout_constraintStart_toStartOf=\u0026quot;parent\u0026quot;\rapp:layout_constraintTop_toBottomOf=\u0026quot;@+id/loginButton\u0026quot; /\u0026gt;\r\u0026lt;/androidx.constraintlayout.widget.ConstraintLayout\u0026gt;\r Edit MainActivity.java and add\npackage com.example.logintestaad;\rimport androidx.annotation.NonNull;\rimport androidx.annotation.Nullable;\rimport androidx.appcompat.app.AppCompatActivity;\rimport android.os.Bundle;\rimport android.view.View;\rimport android.widget.Button;\rimport com.microsoft.identity.client.AuthenticationCallback;\rimport com.microsoft.identity.client.IAccount;\rimport com.microsoft.identity.client.IAuthenticationResult;\rimport com.microsoft.identity.client.IPublicClientApplication;\rimport com.microsoft.identity.client.ISingleAccountPublicClientApplication;\rimport com.microsoft.identity.client.PublicClientApplication;\rimport com.microsoft.identity.client.exception.MsalException;\rpublic class MainActivity extends AppCompatActivity {\rButton signInButton;\rButton signOutButton;\rprivate final static String[] SCOPES = {\u0026quot;Files.Read\u0026quot;};\rprivate ISingleAccountPublicClientApplication mSingleAccountApp;\r@Override\rprotected void onCreate(Bundle savedInstanceState) {\rsuper.onCreate(savedInstanceState);\rsetContentView(R.layout.activity_main);\rsignInButton = findViewById(R.id.loginButton);\rsignOutButton = findViewById(R.id.signoutButton);\rsignInButton.setVisibility(View.GONE);\rsignOutButton.setVisibility(View.GONE);\r//Sign in user\rsignInButton.setOnClickListener(new View.OnClickListener(){\rpublic void onClick(View v) {\rif (mSingleAccountApp == null) {\rreturn;\r}\rmSingleAccountApp.signIn(MainActivity.this, null, SCOPES, getAuthInteractiveCallback());\r}\r});\r//Sign out user\rsignOutButton.setOnClickListener(new View.OnClickListener() {\r@Override\rpublic void onClick(View v) {\rif (mSingleAccountApp == null){\rreturn;\r}\rmSingleAccountApp.signOut(new ISingleAccountPublicClientApplication.SignOutCallback() {\r@Override\rpublic void onSignOut() {\rsignInButton.setVisibility(View.VISIBLE);\rsignOutButton.setVisibility(View.GONE);\r}\r@Override\rpublic void onError(@NonNull MsalException exception){\r}\r});\r}\r});\rPublicClientApplication.createSingleAccountPublicClientApplication(getApplicationContext(),\rR.raw.auth_config_single_account, new IPublicClientApplication.ISingleAccountApplicationCreatedListener() {\r@Override\rpublic void onCreated(ISingleAccountPublicClientApplication application) {\rmSingleAccountApp = application;\rloadAccount();\r}\r@Override\rpublic void onError(MsalException exception) {\r// displayError(exception);\r}\r});\r}\rprivate AuthenticationCallback getAuthInteractiveCallback() {\rreturn new AuthenticationCallback() {\r@Override\rpublic void onSuccess(IAuthenticationResult authenticationResult) {\rsignInButton.setVisibility(View.GONE);\rsignOutButton.setVisibility(View.VISIBLE);\r}\r@Override\rpublic void onError(MsalException exception) {\r/* Failed to acquireToken */\r}\r@Override\rpublic void onCancel() {\r}\r};\r}\rprivate void loadAccount() {\rif (mSingleAccountApp == null) {\rreturn;\r}\rmSingleAccountApp.getCurrentAccountAsync(new ISingleAccountPublicClientApplication.CurrentAccountCallback() {\r@Override\rpublic void onAccountLoaded(@Nullable IAccount activeAccount) {\r// You can use the account data to update your UI or your app database.\rif(activeAccount == null)\r{\rsignInButton.setVisibility(View.VISIBLE);\rsignOutButton.setVisibility(View.GONE);\r}\relse {\rsignOutButton.setVisibility(View.GONE);\rsignInButton.setVisibility(View.VISIBLE);\r}\r}\r@Override\rpublic void onAccountChanged(@Nullable IAccount priorAccount, @Nullable IAccount currentAccount) {\rif (currentAccount == null) {\r// Perform a cleanup task as the signed-in account changed.\r}\r}\r@Override\rpublic void onError(@NonNull MsalException exception) {\r}\r});\r}\r}\r Run application, you should be able to login \u0026amp; Logout\nCreating \u0026amp; Publishing Azure Function Follow below documents to setup Azure Function using Visual Studio or Visual Studio Code.\nDevelop Azure Functions by using Visual Studio Code Develop Azure Functions by using Visual Studio Code\nOnce Azure function is hosted, verify the URL response in browser.\nhttps://\u0026lt;yourfunctionanme\u0026gt;.azurewebsites.net/api/\u0026lt;functionparameter\u0026gt;\nProtect Azure Function with Azure Active Directory Authentication Follow document Configure your App Service or Azure Functions app to use Azure AD login\nOpen function in Azure and select Authentication\nEnable On\nSelect Log in with Azure Active Directory for Action to take when request is not authenticated\nClick Azure Active Directory as Authentication Provider\nClick Advanced\nEnter client id from andridLoginTest Azure Directory Application setup (Setup Azure Active Directory)\nEnter Issuer Url as https://sts.windows.net/\u0026lt;tokenid\u0026gt;\nClick Allowed Token Audience and add your function URL (do not add / or api/, just base URL)\nSetup Azure Active Directory (AAD) API Expose and Scopes Open Azure Active Directory\nSelect Branding and setup Home page URL to Azure Function\nClick Expose an API -\u0026gt; Add a scope -\u0026gt; set Application ID URI to Azure function URI(https://.azurewebsites.net) -\u0026gt; Save and Continue\nIn next window Add a scope -\u0026gt; set Scope name as apiaccess-\u0026gt; select Admins and users -\u0026gt; Enter anything in consent name and description\nClick API permissions -\u0026gt; Add a Permission -\u0026gt; My API's -\u0026gt; select Name of API (scope name -\u0026gt; apiaccess)-\u0026gt; Add Permission -\u0026gt; Grant admin consent for Default -\u0026gt; yes-\u0026gt;save-\u0026gt;grant admin consent-\u0026gt;yes\nAndroid App Calling function Edit build.gradle and add\n implementation 'com.android.volley:volley:1.1.1'\r Edit AndroidManifest.xml and add\n \u0026lt;uses-permission android:name=\u0026quot;android.permission.INTERNET\u0026quot; /\u0026gt;\r Replace MainActivity.java\npackage com.example.logintestaad;\rimport androidx.annotation.NonNull;\rimport androidx.annotation.Nullable;\rimport androidx.appcompat.app.AppCompatActivity;\rimport android.os.Bundle;\rimport android.view.View;\rimport android.widget.Button;\rimport com.android.volley.AuthFailureError;\rimport com.android.volley.Request;\rimport com.android.volley.Response;\rimport com.android.volley.VolleyError;\rimport com.android.volley.toolbox.StringRequest;\rimport com.android.volley.toolbox.Volley;\rimport com.microsoft.identity.client.AuthenticationCallback;\rimport com.microsoft.identity.client.IAccount;\rimport com.microsoft.identity.client.IAuthenticationResult;\rimport com.microsoft.identity.client.IPublicClientApplication;\rimport com.microsoft.identity.client.ISingleAccountPublicClientApplication;\rimport com.microsoft.identity.client.PublicClientApplication;\rimport com.microsoft.identity.client.exception.MsalException;\rimport com.android.volley.RequestQueue;\rimport java.util.HashMap;\rimport java.util.Map;\rpublic class MainActivity extends AppCompatActivity {\rprivate final static String[] SCOPES = {\u0026quot;https://androidaccessfunctiontest20210122095133.azurewebsites.net/apiaccess\u0026quot;};\rButton signInButton;\rButton signOutButton;\rprivate ISingleAccountPublicClientApplication mSingleAccountApp;\rprivate RequestQueue queue;\r@Override\rprotected void onCreate(Bundle savedInstanceState) {\rsuper.onCreate(savedInstanceState);\rsetContentView(R.layout.activity_main);\rsignInButton = findViewById(R.id.loginButton);\rsignOutButton = findViewById(R.id.signoutButton);\rsignInButton.setVisibility(View.GONE);\rsignOutButton.setVisibility(View.GONE);\r//Sign in user\rsignInButton.setOnClickListener(new View.OnClickListener() {\rpublic void onClick(View v) {\rif (mSingleAccountApp == null) {\rreturn;\r}\rmSingleAccountApp.signIn(MainActivity.this, null, SCOPES, getAuthInteractiveCallback());\r}\r});\r//Sign out user\rsignOutButton.setOnClickListener(new View.OnClickListener() {\r@Override\rpublic void onClick(View v) {\rif (mSingleAccountApp == null) {\rreturn;\r}\rmSingleAccountApp.signOut(new ISingleAccountPublicClientApplication.SignOutCallback() {\r@Override\rpublic void onSignOut() {\rsignInButton.setVisibility(View.VISIBLE);\rsignOutButton.setVisibility(View.GONE);\r}\r@Override\rpublic void onError(@NonNull MsalException exception) {\r}\r});\r}\r});\rPublicClientApplication.createSingleAccountPublicClientApplication(getApplicationContext(),\rR.raw.auth_config_single_account, new IPublicClientApplication.ISingleAccountApplicationCreatedListener() {\r@Override\rpublic void onCreated(ISingleAccountPublicClientApplication application) {\rmSingleAccountApp = application;\rloadAccount();\r}\r@Override\rpublic void onError(MsalException exception) {\r// displayError(exception);\r}\r});\r}\rprivate AuthenticationCallback getAuthInteractiveCallback() {\rreturn new AuthenticationCallback() {\r@Override\rpublic void onSuccess(IAuthenticationResult authenticationResult) {\rsignInButton.setVisibility(View.GONE);\rsignOutButton.setVisibility(View.VISIBLE);\rString token = authenticationResult.getAccessToken();\rString tokenGenerationAddress = \u0026quot;https://androidaccessfunctiontest20210122095133.azurewebsites.net/api/callme\u0026quot;;\r//cal azure function with access token\rqueue = Volley.newRequestQueue(getApplicationContext());\rStringRequest stringRequest = new StringRequest(Request.Method.GET, tokenGenerationAddress,\rnew Response.Listener\u0026lt;String\u0026gt;() {\r@Override\rpublic void onResponse(String response) {\rString text = response;\r}\r}, new Response.ErrorListener() {\r@Override\rpublic void onErrorResponse(VolleyError error) {\r//textView.setText(\u0026quot;That didn't work!\u0026quot;);\r}\r}) {\r@Override\rpublic Map\u0026lt;String, String\u0026gt; getHeaders() throws AuthFailureError {\rHashMap\u0026lt;String, String\u0026gt; headers = new HashMap\u0026lt;String, String\u0026gt;();\rheaders.put(\u0026quot;Authorization\u0026quot;, \u0026quot;Bearer \u0026quot; + token);\rreturn headers;\r}\r};\rqueue.add(stringRequest);\r}\r@Override\rpublic void onError(MsalException exception) {\r}\r@Override\rpublic void onCancel() {\r}\r};\r}\rprivate void loadAccount() {\rif (mSingleAccountApp == null) {\rreturn;\r}\rmSingleAccountApp.getCurrentAccountAsync(new ISingleAccountPublicClientApplication.CurrentAccountCallback() {\r@Override\rpublic void onAccountLoaded(@Nullable IAccount activeAccount) {\r// You can use the account data to update your UI or your app database.\rif (activeAccount == null) {\rsignInButton.setVisibility(View.VISIBLE);\rsignOutButton.setVisibility(View.GONE);\r} else {\rsignOutButton.setVisibility(View.VISIBLE);\rsignInButton.setVisibility(View.GONE);\r}\r}\r@Override\rpublic void onAccountChanged(@Nullable IAccount priorAccount, @Nullable IAccount currentAccount) {\rif (currentAccount == null) {\r// Perform a cleanup task as the signed-in account changed.\r}\r}\r@Override\rpublic void onError(@NonNull MsalException exception) {\r}\r});\r}\r}\r Finally, debug code, you should be able to see response from Azure function.\n","date":"23 Jan 21","permalink":"https://inderpalaulakh.com/posts/azureaad/","tags":["Android","Azure Active Directory","AAD","Azure Function","Authentication"],"title":"Android Application implementing Azure Active Directory Authentication to call protected Azure Function "},{"content":"Checkstyle is a development tool to help programmers write Java code that adheres to a coding standard.\nSteps to enable checkstyle for Android Project Create checkstyle.xml Create folder checkstyle inside Android Project app folder. Create file checkstyle.xml Reference\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot;?\u0026gt;\r\u0026lt;!DOCTYPE module PUBLIC\r\u0026quot;-//Puppy Crawl//DTD Check Configuration 1.2//EN\u0026quot;\r\u0026quot;http://www.puppycrawl.com/dtds/configuration_1_2.dtd\u0026quot;\u0026gt;\r\u0026lt;!--\rCheckstyle configuration that checks the sun coding conventions from:\r- the Java Language Specification at\rhttp://java.sun.com/docs/books/jls/second_edition/html/index.html\r- the Sun Code Conventions at http://java.sun.com/docs/codeconv/\r- the Javadoc guidelines at\rhttp://java.sun.com/j2se/javadoc/writingdoccomments/index.html\r- the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html\r- some best practices\rCheckstyle is very configurable. Be sure to read the documentation at\rhttp://checkstyle.sf.net (or in your downloaded distribution).\rMost Checks are configurable, be sure to consult the documentation.\rTo completely disable a check, just comment it out or delete it from the file.\rFinally, it is worth reading the documentation.\r--\u0026gt;\r\u0026lt;module name=\u0026quot;Checker\u0026quot;\u0026gt;\r\u0026lt;!--\rIf you set the basedir property below, then all reported file\rnames will be relative to the specified directory. See\rhttp://checkstyle.sourceforge.net/5.x/config.html#Checker\r\u0026lt;property name=\u0026quot;basedir\u0026quot; value=\u0026quot;${basedir}\u0026quot;/\u0026gt;\r--\u0026gt;\r\u0026lt;!-- Checks that a package-info.java file exists for each package. --\u0026gt;\r\u0026lt;!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocPackage --\u0026gt;\r\u0026lt;module name=\u0026quot;JavadocPackage\u0026quot;/\u0026gt;\r\u0026lt;!-- Checks whether files end with a new line. --\u0026gt;\r\u0026lt;!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile --\u0026gt;\r\u0026lt;module name=\u0026quot;NewlineAtEndOfFile\u0026quot;/\u0026gt;\r\u0026lt;!-- Checks that property files contain the same keys. --\u0026gt;\r\u0026lt;!-- See http://checkstyle.sf.net/config_misc.html#Translation --\u0026gt;\r\u0026lt;module name=\u0026quot;Translation\u0026quot;/\u0026gt;\r\u0026lt;!-- Checks for Size Violations. --\u0026gt;\r\u0026lt;!-- See http://checkstyle.sf.net/config_sizes.html --\u0026gt;\r\u0026lt;module name=\u0026quot;FileLength\u0026quot;/\u0026gt;\r\u0026lt;!-- Checks for whitespace --\u0026gt;\r\u0026lt;!-- See http://checkstyle.sf.net/config_whitespace.html --\u0026gt;\r\u0026lt;module name=\u0026quot;FileTabCharacter\u0026quot;/\u0026gt;\r\u0026lt;!-- Miscellaneous other checks. --\u0026gt;\r\u0026lt;!-- See http://checkstyle.sf.net/config_misc.html --\u0026gt;\r\u0026lt;module name=\u0026quot;RegexpSingleline\u0026quot;\u0026gt;\r\u0026lt;property name=\u0026quot;format\u0026quot; value=\u0026quot;\\s+$\u0026quot;/\u0026gt;\r\u0026lt;property name=\u0026quot;minimum\u0026quot; value=\u0026quot;0\u0026quot;/\u0026gt;\r\u0026lt;property name=\u0026quot;maximum\u0026quot; value=\u0026quot;0\u0026quot;/\u0026gt;\r\u0026lt;property name=\u0026quot;message\u0026quot; value=\u0026quot;Line has trailing spaces.\u0026quot;/\u0026gt;\r\u0026lt;/module\u0026gt;\r\u0026lt;module name=\u0026quot;TreeWalker\u0026quot;\u0026gt;\r\u0026lt;!-- Checks for Javadoc comments. --\u0026gt;\r\u0026lt;!-- See http://checkstyle.sf.net/config_javadoc.html --\u0026gt;\r\u0026lt;module name=\u0026quot;JavadocMethod\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;JavadocType\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;JavadocVariable\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;JavadocStyle\u0026quot;/\u0026gt;\r\u0026lt;!-- Checks for Naming Conventions. --\u0026gt;\r\u0026lt;!-- See http://checkstyle.sf.net/config_naming.html --\u0026gt;\r\u0026lt;module name=\u0026quot;ConstantName\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;LocalFinalVariableName\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;LocalVariableName\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;MemberName\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;MethodName\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;PackageName\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;ParameterName\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;StaticVariableName\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;TypeName\u0026quot;/\u0026gt;\r\u0026lt;!-- Checks for Headers --\u0026gt;\r\u0026lt;!-- See http://checkstyle.sf.net/config_header.html --\u0026gt;\r\u0026lt;!-- \u0026lt;module name=\u0026quot;Header\u0026quot;\u0026gt; --\u0026gt;\r\u0026lt;!-- The follow property value demonstrates the ability --\u0026gt;\r\u0026lt;!-- to have access to ANT properties. In this case it uses --\u0026gt;\r\u0026lt;!-- the ${basedir} property to allow Checkstyle to be run --\u0026gt;\r\u0026lt;!-- from any directory within a project. See property --\u0026gt;\r\u0026lt;!-- expansion, --\u0026gt;\r\u0026lt;!-- http://checkstyle.sf.net/config.html#properties --\u0026gt;\r\u0026lt;!-- \u0026lt;property --\u0026gt;\r\u0026lt;!-- name=\u0026quot;headerFile\u0026quot; --\u0026gt;\r\u0026lt;!-- value=\u0026quot;${basedir}/java.header\u0026quot;/\u0026gt; --\u0026gt;\r\u0026lt;!-- \u0026lt;/module\u0026gt; --\u0026gt;\r\u0026lt;!-- Following interprets the header file as regular expressions. --\u0026gt;\r\u0026lt;!-- \u0026lt;module name=\u0026quot;RegexpHeader\u0026quot;/\u0026gt; --\u0026gt;\r\u0026lt;!-- Checks for imports --\u0026gt;\r\u0026lt;!-- See http://checkstyle.sf.net/config_import.html --\u0026gt;\r\u0026lt;module name=\u0026quot;AvoidStarImport\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;IllegalImport\u0026quot;/\u0026gt; \u0026lt;!-- defaults to sun.* packages --\u0026gt;\r\u0026lt;module name=\u0026quot;RedundantImport\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;UnusedImports\u0026quot;/\u0026gt;\r\u0026lt;!-- Checks for Size Violations. --\u0026gt;\r\u0026lt;!-- See http://checkstyle.sf.net/config_sizes.html --\u0026gt;\r\u0026lt;module name=\u0026quot;LineLength\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;MethodLength\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;ParameterNumber\u0026quot;/\u0026gt;\r\u0026lt;!-- Checks for whitespace --\u0026gt;\r\u0026lt;!-- See http://checkstyle.sf.net/config_whitespace.html --\u0026gt;\r\u0026lt;module name=\u0026quot;EmptyForIteratorPad\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;GenericWhitespace\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;MethodParamPad\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;NoWhitespaceAfter\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;NoWhitespaceBefore\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;OperatorWrap\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;ParenPad\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;TypecastParenPad\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;WhitespaceAfter\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;WhitespaceAround\u0026quot;/\u0026gt;\r\u0026lt;!-- Modifier Checks --\u0026gt;\r\u0026lt;!-- See http://checkstyle.sf.net/config_modifiers.html --\u0026gt;\r\u0026lt;module name=\u0026quot;ModifierOrder\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;RedundantModifier\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;AvoidNestedBlocks\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;EmptyBlock\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;LeftCurly\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;NeedBraces\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;RightCurly\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;AvoidInlineConditionals\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;DoubleCheckedLocking\u0026quot;/\u0026gt; \u0026lt;!-- MY FAVOURITE --\u0026gt;\r\u0026lt;module name=\u0026quot;EmptyStatement\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;EqualsHashCode\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;HiddenField\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;IllegalInstantiation\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;InnerAssignment\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;MagicNumber\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;MissingSwitchDefault\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;RedundantThrows\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;SimplifyBooleanExpression\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;SimplifyBooleanReturn\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;DesignForExtension\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;FinalClass\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;HideUtilityClassConstructor\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;InterfaceIsType\u0026quot;/\u0026gt;\r\u0026lt;module name=\u0026quot;VisibilityModifier\u0026quot;/\u0026gt;\r\u0026lt;/module\u0026gt;\r\u0026lt;/module\u0026gt;\r Create checkstyle.gradle Create checkstyle.gradle inside app folder (at same level where build.gradle exists)\napply plugin: 'checkstyle'\rcheckstyle {\rdescription: 'code style check'\rgroup 'verification'\rconfigFile file('checkstyle/checkstyle.xml)\r}\rtask checkstyle(type: Checkstyle, group: 'verification') {\rsource 'src'\rinclude '**/*.java'\rexclude '**/gen/**'\rexclude '**/R.java'\rclasspath = files()\r}\r Enable checkstyle.gradle Edit build.gradle(Project:**) and add\nsubprojects\r{\rapply from:\u0026quot;checkstyle.gradle\u0026quot;\rafterEvaluate{\rpreBuild.dependsOn('checkstyle')\rcheck.dependsOn 'checkstyle'\r}\r}\r Finally Run/Build application (preBuild.dependsOn('checkstyle') will force the build to fail if checkstyle finds any violation); or Open Terminal and execute gradle check --stacktrace\nYou can see HTML violations report at app/build/reports/checkstyle/checkstyle.html\n","date":"17 Jan 21","permalink":"https://inderpalaulakh.com/posts/android-checkstyle/","tags":["Android","Gradle","checkstyle"],"title":"Android Studio Enable Checkstyle (Gradle)"},{"content":"I use online tools to generate sequence diagrams. Recently, my colleague at work guided me about Mermaid to generate sequence diagrams. This is an awesome tool.\nMermaid\nMermaid has online editor Editor. However, I did not use online editor for confidentiality reasons.\nI created index.html and opened in browser.\n\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;script src=\u0026quot;https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;script\u0026gt;\rmermaid.initialize({ startOnLoad: true });\r\u0026lt;/script\u0026gt;\r\u0026lt;div class=\u0026quot;mermaid\u0026quot;\u0026gt;\rsequenceDiagram\rparticipant A\rparticipant B A-\u0026gt;\u0026gt;B:How are you?\rB--\u0026gt;\u0026gt; A: I am good\rloop test loop\rA-\u0026gt;\u0026gt;B:How are you?\rB--\u0026gt;\u0026gt; A: I am good\rend\r\u0026lt;/div\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r ","date":"06 Jan 21","permalink":"https://inderpalaulakh.com/posts/mermaid/","tags":null,"title":"Generation of Sequence Diagram using Mermaid"},{"content":"The year 2020 was a year of unpredicted event Covid-19. In January, my wife travelled to Toronto for her co-op and I planned to spend my evenings studying algorithms and software engineering concepts alongside full time job.\nI planned to complete most of the study-topics in March and completed as planned. In mid-March my office shared guidelines to work from home. My wife was also back from Toronto and started a co-op remotely.\nI saved two hours of commute time. My office had layoffs. Some of my teammates were laid off. It was a hard time to see teammates leaving, and I got worried about myself.\nI started to spend more time studying software engineering topics. Usually, I develop hobby projects using technologies I do not use as a part of my job. Because of Covid-19, I got much time to work on hobby projects to explore AWS and Azure infrastructures.\nMeanwhile, because of layoffs I started preparing for interviews and applied for jobs in June/July. My wife gifted me a LeetCode subscription for interview preparation.\nFinally, I received an offer from Microsoft in September and it was the happiest moment for me. I resigned from my job and joined Microsoft in October.\nI am interested to learn more about Software Architecture. Luckily, my mentor at my current job is guiding me to read books on topics to achieve my goal.\nThis year was a year of learning. Important learning for me from this year was to be ready for unplanned events like Covid-19. It taught me the value of time. Using commute time to study had fruitful results.\nEven though, 2020 will be remembered as a Covid-19 year, However, this is the year where technology contributed to achieve social communication, healthcare, personal and organizational goals.\nLearnings from 2020:-\nDo something useful in commute time (prodcast if driving :))\nBe in touch with the latest technologies\nBe healthy\nBlogging is good\nIn 2021, I will:-\nLeave fried food( Now I am 30 :) )\nContinue blogging to share my learning\nRead more books\nWill develop an app\n","date":"31 Dec 20","permalink":"https://inderpalaulakh.com/posts/2020review/","tags":["2020"],"title":"2020 Review"},{"content":"Recently, I struggled a bit to figure out a way to access Azure-Pipeline Variables in Node.js JavaScript/TypeScript project. However, it is easy.\n.yml Pipeline code - task: Npm@1\rdisplayName: \u0026quot;Run project\u0026quot;\renv:\rMyVariableName: $(MYVARIABLENAME) // this is pipeline variable name, in Capital letters\rinputs:\rcommands: 'custom'\rCustomCommand: 'run test'\r npm Package install package string-replace-loader\nTypeScript/JavaScript File Create a file with any name \u0026ldquo;test.ts\u0026rdquo;\ntest.ts\rconst test = () =\u0026gt; {\rconst myVariable = \u0026quot;My-Variable\u0026quot;;\r};\r Setup webpack.config.js  module: {\rrules: [\r{\rtest: /test\\.ts$/,\rloader: 'string-replace-loader',\roptions: {\rsearch: 'My-Variable',\rreplace: process.env['MyVariableName'] // from .yml env\r}\r}\r]\r}\r}\r Finally \r\u0026quot;scripts\u0026quot; :{\r\u0026quot;test\u0026quot;: \u0026quot;webpack --config webpack.config.js\u0026quot;\r}\r ","date":"30 Dec 20","permalink":"https://inderpalaulakh.com/posts/pipelinevar/","tags":["Azure-Pipeline","Node.js","Pipeline-Variables","Webpack"],"title":"Accessing Azure Pipeline variables in Webpack Node.js"},{"content":"To understand Double Dispatch, understanding of Overloading and Overriding is must. I already talked about Overloading and Overriding in post Overloading \u0026amp; Overriding.\nOne level of virtual dispatching derived types override a base types: as shown below\n class Farms\r{\rpublic virtual void Irrigation()\r{\rConsole.WriteLine(\u0026quot;Farm Type\u0026quot;);\r}\r}\rclass WheatFarm : Farms\r{\rpublic override void Irrigation()\r{\rConsole.WriteLine(\u0026quot;WheatFarm\u0026quot;);\r}\r}\rclass RicaFarm : WheatFarm\r{\rpublic override void Irrigation()\r{\rConsole.WriteLine(\u0026quot;RicaFarm\u0026quot;);\r}\r}\rstatic void Main(string[] args)\r{\rvar a = new Farms();\rvar b = new WheatFarm();\rvar c = new RicaFarm();\ra.Irrigation();\rb.Irrigation();\rc.Irrigation();\r}\r//output\rFarm Type\rWheatFarm\rRicaFarm\r Two level of virtual dispatching (Double Dispatch) This concept is used in Visitor Design Pattern.\nuse polymorphic static binding technique to ensure that proper overload is called\n class Crop\r{\rpublic virtual void CropName(CropWatering obj)\r{\robj.WaterSupply(this);\r}\r}\rclass Wheat : Crop\r{\rpublic override void CropName(CropWatering obj)\r{\robj.WaterSupply(this);\r}\r}\r/* An example of overloading (Method with same name but different parameter type)\r* */\rclass CropWatering\r{\rpublic virtual void WaterSupply(Crop crop)\r{\rConsole.WriteLine(\u0026quot;CropWatering working on type Crop\u0026quot;);\r}\rpublic virtual void WaterSupply(Wheat wheat)\r{\rConsole.WriteLine(\u0026quot;CropWatering working on type Wheat\u0026quot;);\r}\r}\rclass CropWatringSpring : CropWatering\r{\rpublic override void WaterSupply(Crop crop)\r{\rConsole.WriteLine(\u0026quot;CropWatringSpring working on type Crop\u0026quot;);\r}\rpublic override void WaterSupply(Wheat wheat)\r{\rConsole.WriteLine(\u0026quot;CropWatringSpring working on type Wheat\u0026quot;);\r}\r}\rstatic void Main(string[] args)\r{\rCrop crop = new Crop();\rWheat wheat = new Wheat();\rCropWatering cropWatering = new CropWatering();\rcrop.CropName(cropWatering);\rwheat.CropName(cropWatering);\rCropWatringSpring cropWatringSpring = new CropWatringSpring();\rcrop.CropName(cropWatringSpring);\rwheat.CropName(cropWatringSpring);\r}\r//output\rCropWatering working on type Crop\rCropWatering working on type Wheat\rCropWatringSpring working on type Crop\rCropWatringSpring working on type Wheat\r Reference\n","date":"28 Dec 20","permalink":"https://inderpalaulakh.com/posts/doubledispatch/","tags":["Object-Oriented"],"title":"DoubleDispatch"},{"content":"To learn about Single \u0026amp; Double Dispatch, many design patterns, we need to understand Overloading and Overriding.\nOverloading Overloading is compile-time polymorphism. The methods/functions with same name but different number/type parameters are example of Overloading.\nAs Overloading is compile-time, means during run-time the base type is considered. Example:\nclass Crop\r{\rpublic virtual void CropName()\r{\rConsole.WriteLine(\u0026quot;Hey, My type is Crop\u0026quot;);\r}\r}\rclass Wheat : Crop\r{\rpublic override void CropName()\r{\rConsole.WriteLine(\u0026quot;Hey, My type is Wheat\u0026quot;);\r}\r}\r/* An example of overloading (Method with same name but different parameter type)\r* */\rclass CropWatering\r{\rpublic void WaterSupply(Crop crop)\r{\rConsole.WriteLine(\u0026quot;I am working on type Crop\u0026quot;);\r}\rpublic void WaterSupply(Wheat wheat)\r{\rConsole.WriteLine(\u0026quot;I am working on type Wheat\u0026quot;);\r}\r}\r In main, If I create an object of type Crop and Wheat, an expected result will appear in console.\nstatic void Main(string[] args)\r{\rCrop crop = new Crop();\rWheat wheat = new Wheat();\rCropWatering cropWatering = new CropWatering();\rcropWatering.WaterSupply(crop);\rcropWatering.WaterSupply(wheat);\r}\rOutput:\rI am working on type Crop\rI am working on type Wheat\r To demonstrate, compile-type, if we change the Wheat type to Crop, \u0026lsquo;new Wheat()\u0026rsquo; is ignored and WaterSupply(Crop crop) is called for object crop and wheat.\nstatic void Main(string[] args)\r{\rCrop crop = new Crop();\rCrop wheat = new Wheat();\rCropWatering cropWatering = new CropWatering();\rcropWatering.WaterSupply(crop);\rcropWatering.WaterSupply(wheat);\r}\rOutput:\rI am working on type Crop\rI am working on type Crop\r Overriding Overriding is run-time polymorphism. The methods/functions with same name and number/type of parameters are example of Overriding (Inheritance).\nclass Crop\r{\rpublic virtual void CropName()\r{\rConsole.WriteLine(\u0026quot;Hey, My type is Crop\u0026quot;);\r}\r}\rclass Wheat : Crop\r{\rpublic override void CropName()\r{\rConsole.WriteLine(\u0026quot;Hey, My type is Wheat\u0026quot;);\r}\r}\r static void Main(string[] args)\r{\rCrop crop = new Crop();\rWheat wheat = new Wheat();\rcrop.CropName();\rwheat.CropName();\r}\rOutput:\rHey, My type is Crop\rHey, My type is Wheat\r As type is determined at run-time thus new Crop() and new Wheat() is considered for object.\nstatic void Main(string[] args)\r{\rCrop crop = new Crop();\rCrop wheat = new Wheat();\rcrop.CropName();\rwheat.CropName();\r}\rOutput:\rHey, My type is Crop\rHey, My type is Wheat\r ","date":"15 Dec 20","permalink":"https://inderpalaulakh.com/posts/dispatch/","tags":["Object-Oriented"],"title":"Overloading \u0026 Overriding"},{"content":"The book “Don’t make me think” is written by Steve Krug. This is the first book that I read about UX(User Experience Design) design. This book is concise and has four sections.\nThe “guiding principles” talks about not puzzling the user to find required content. These principles guide to omit needless content, using conventions, images and explains the web page scanning habit of user (not reading complete content).\nThe section “Things you need to get right” has content to design navigation that helps user to find their way. The big bang theory of web design is about designing home page, using tag lines (nothing beats a good tagline), welcome blurb and testing home page usability.\nThe section “Making sure you got them right” is all about usability testing. Resolving conflicting thoughts between developers, designers, marketing and project managers, this section also talks about usability testing on 10 cents a day. Focusing on early usability tests, do it yourself usability testing and how often, this section importantly explains feedback loop. Finally, this section has guidance about “deciding what to fix” from feedback.\nThe final section is about Mobile UI design. Talking about significant difference between Web \u0026amp; Mobile App design, the section has some techniques for screen recording usability testing (using cameras, no screen mirroring).\nUsers browse to website with “The reservoir of goodwill” and the goodwill can be increased or diminished by many factors. Finally, the last topic of book has an eye-catching line:\n“Unless you’re going to make a blanket decision that people with disabilities aren’t part of your audience, you really can’t say your site is usable unless it’s accessible.”\nAfter reading this book, I learned concepts to enlighten user experience. The book helped me to think about conducting usability tests in early stages to avoid disasters, to discuss the importance of speaking user language for make user experience rich.\n","date":"14 Dec 20","permalink":"https://inderpalaulakh.com/posts/my-book-donotmakemethink-post/","tags":["Book-Summary","Don’t make me think"],"title":"Book Summary: Don’t make me think - Steve Krug "}]
[{"content":"The year 2020 was a year of unpredicted event Covid-19. In January, my wife travelled to Ottawa for her co-op and I planned to spend my evenings studying algorithms and software engineering concepts alongside full time job.\nI planned to complete most of the study-topics in March and completed as planned. In mid-March my office shared guidelines to work from home in a Covid-19. My wife was also back from Ottawa and started a co-op remotely.\nI saved two hours of commute time. My office had layoffs. Some of my teammates were laid off. It was a hard time to see teammates leaving, and I got worried about myself.\nI started to spend more time studing software engineering topics. Usually, I develop hobby projects using technologies I do not use as a part of my job. Because of Covid-19, I got much time to work on hobby projects to explore AWS and Azure infrastructures.\nMeanwhile, because of layoffs I started preparing for interviews and applied for jobs in June/July. My wife gifted me a LeetCode subscription for interview prepration.\nFinally, I received an offer from Microsoft in September and it was the happiest moment for me. I resigned from my job and joined Microsoft in October.\nI am interested to learn more about Software Architecture. Luckily, my mentor at my cureent job is guiding me to read books on topics to achieve my goal.\nThis year was a year of learning. Important learning for me from this year was to be ready for unplanned events like Covid-19. It taught me the value of time. Using commute time to study had fruitful results.\nEven though, 2020 will be remembered as a Covid-19 year, However, this is the year where technology contributed to achieve social communication, healthcare, personal and organizational goals.\nLearnings from 2020:-\nDo something useful in commute time (prodcast if driving :))\nBe in touch with the latest technologies\nBe healthy\nBlogging is good\nIn 2021, I will:-\nLeave fried food( Now I am 30 :) )\nContinue blogging to share my learning\nRead more books\nWill develop an app\n","date":"2020-12-31","permalink":"https://inderpalaulakh.com/posts/2020review/","tags":["2020"],"title":"2020 Review"},{"content":"Recently, I struggled a bit to figure out a way to access Azure-Pipeline Variables in Node.js JavaScript/TypeScript project. However, it is easy.\n.yml Pipeline code - task: Npm@1 displayName: \u0026quot;Run project\u0026quot; env: MyVariableName: $(MYVARIABLENAME) // this is pipeline variable name, in Capital letters inputs: commands: 'custom' CustomCommand: 'run test'  npm Package install package string-replace-loader\nTypeScript/JavaScript File Create a file with any name \u0026ldquo;test.ts\u0026rdquo;\ntest.ts const test = () =\u0026gt; { const myVariable = \u0026quot;My-Variable\u0026quot;; };  Setup webpack.config.js  module: { rules: [ { test: /test\\.ts$/, loader: 'string-replace-loader', options: { search: 'My-Variable', replace: process.env['MyVariableName'] // from .yml env } } ] } }  Finally  \u0026quot;scripts\u0026quot; :{ \u0026quot;test\u0026quot;: \u0026quot;webpack --config webpack.config.js\u0026quot; }  ","date":"2020-12-30","permalink":"https://inderpalaulakh.com/posts/pipelinevar/","tags":["Azure-Pipeline","Node.js","Pipeline-Variables","Webpack"],"title":"Accessing Azure Pipeline variables in Webpack Node.js"},{"content":"To understand Double Dispatch, understanding of Overloading and Overriding is must. I already talked about Overloading and Overriding in post Overloading \u0026amp; Overriding.\nOne level of virtual dispatching derived types override a base types: as shown below\n class Farms { public virtual void Irrigation() { Console.WriteLine(\u0026quot;Farm Type\u0026quot;); } } class WheatFarm : Farms { public override void Irrigation() { Console.WriteLine(\u0026quot;WheatFarm\u0026quot;); } } class RicaFarm : WheatFarm { public override void Irrigation() { Console.WriteLine(\u0026quot;RicaFarm\u0026quot;); } } static void Main(string[] args) { var a = new Farms(); var b = new WheatFarm(); var c = new RicaFarm(); a.Irrigation(); b.Irrigation(); c.Irrigation(); } //output Farm Type WheatFarm RicaFarm  Two level of virtual dispatching (Double Dispatch) This concept is used in Visitor Design Pattern.\nuse polymorphic static binding technique to ensure that proper overload is called\n class Crop { public virtual void CropName(CropWatering obj) { obj.WaterSupply(this); } } class Wheat : Crop { public override void CropName(CropWatering obj) { obj.WaterSupply(this); } } /* An example of overloading (Method with same name but different parameter type) * */ class CropWatering { public virtual void WaterSupply(Crop crop) { Console.WriteLine(\u0026quot;CropWatering working on type Crop\u0026quot;); } public virtual void WaterSupply(Wheat wheat) { Console.WriteLine(\u0026quot;CropWatering working on type Wheat\u0026quot;); } } class CropWatringSpring : CropWatering { public override void WaterSupply(Crop crop) { Console.WriteLine(\u0026quot;CropWatringSpring working on type Crop\u0026quot;); } public override void WaterSupply(Wheat wheat) { Console.WriteLine(\u0026quot;CropWatringSpring working on type Wheat\u0026quot;); } } static void Main(string[] args) { Crop crop = new Crop(); Wheat wheat = new Wheat(); CropWatering cropWatering = new CropWatering(); crop.CropName(cropWatering); wheat.CropName(cropWatering); CropWatringSpring cropWatringSpring = new CropWatringSpring(); crop.CropName(cropWatringSpring); wheat.CropName(cropWatringSpring); } //output CropWatering working on type Crop CropWatering working on type Wheat CropWatringSpring working on type Crop CropWatringSpring working on type Wheat  Reference\n","date":"2020-12-28","permalink":"https://inderpalaulakh.com/posts/doubledispatch/","tags":["Object-Oriented"],"title":"DoubleDispatch"},{"content":"To learn about Single \u0026amp; Double Dispatch, many design patterns, we need to understand Overloading and Overriding.\nOverloading Overloading is compile-time polymorphism. The methods/functions with same name but different number/type parameters are example of Overloading.\nAs Overloading is compile-time, means during run-time the base type is considered. Example:\nclass Crop { public virtual void CropName() { Console.WriteLine(\u0026quot;Hey, My type is Crop\u0026quot;); } } class Wheat : Crop { public override void CropName() { Console.WriteLine(\u0026quot;Hey, My type is Wheat\u0026quot;); } } /* An example of overloading (Method with same name but different parameter type) * */ class CropWatering { public void WaterSupply(Crop crop) { Console.WriteLine(\u0026quot;I am working on type Crop\u0026quot;); } public void WaterSupply(Wheat wheat) { Console.WriteLine(\u0026quot;I am working on type Wheat\u0026quot;); } }  In main, If I create an object of type Crop and Wheat, an expected result will appear in console.\nstatic void Main(string[] args) { Crop crop = new Crop(); Wheat wheat = new Wheat(); CropWatering cropWatering = new CropWatering(); cropWatering.WaterSupply(crop); cropWatering.WaterSupply(wheat); } Output: I am working on type Crop I am working on type Wheat  To demostrate, compile-type, if we change the Wheat type to Crop, \u0026lsquo;new Wheat()\u0026rsquo; is ignored and WaterSupply(Crop crop) is called for object crop and wheat.\nstatic void Main(string[] args) { Crop crop = new Crop(); Crop wheat = new Wheat(); CropWatering cropWatering = new CropWatering(); cropWatering.WaterSupply(crop); cropWatering.WaterSupply(wheat); } Output: I am working on type Crop I am working on type Crop  Overriding Overriding is run-time polymorphism. The methods/functions with same name and number/type of parameters are example of Overriding (Inheritance).\nclass Crop { public virtual void CropName() { Console.WriteLine(\u0026quot;Hey, My type is Crop\u0026quot;); } } class Wheat : Crop { public override void CropName() { Console.WriteLine(\u0026quot;Hey, My type is Wheat\u0026quot;); } }  static void Main(string[] args) { Crop crop = new Crop(); Wheat wheat = new Wheat(); crop.CropName(); wheat.CropName(); } Output: Hey, My type is Crop Hey, My type is Wheat  As type is determined at run-time thus new Crop() and new Wheat() is considered for object.\nstatic void Main(string[] args) { Crop crop = new Crop(); Crop wheat = new Wheat(); crop.CropName(); wheat.CropName(); } Output: Hey, My type is Crop Hey, My type is Wheat  ","date":"2020-12-15","permalink":"https://inderpalaulakh.com/posts/dispatch/","tags":["Object-Oriented"],"title":"Overloading \u0026 Overriding"},{"content":"The book “Don’t make me think” is written by Steve Krug. This is the first book that I read about UX(User Experience Design) design. This book is concise and has four sections.\nThe “guiding principles” talks about not puzzling the user to find required content. These principles guide to omit needless content, using conventions, images and explains the web page scanning habit of user (not reading complete content).\nThe section “Things you need to get right” has content to design navigation that helps user to find their way. The big bang theory of web design is about designing home page, using tag lines (nothing beats a good tagline), welcome blurb and testing home page usability.\nThe section “Making sure you got them right” is all about usability testing. Resolving conflicting thoughts between developers, designers, marketing and project managers, this section also talks about usability testing on 10 cents a day. Focusing on early usability tests, do it yourself usability testing and how often, this section importantly explains feedback loop. Finally, this section has guidance about “deciding what to fix” from feedback.\nThe final section is about Mobile UI design. Talking about significant difference between Web \u0026amp; Mobile App design, the section has some techniques for screen recording usability testing (using cameras, no screen mirroring).\nUsers browse to website with “The reservoir of goodwill” and the goodwill can be increased or diminished by many factors. Finally, the last topic of book has an eye-catching line:\n“Unless you’re going to make a blanket decision that people with disabilities aren’t part of your audience, you really can’t say your site is usable unless it’s accessible.”\nAfter reading this book, I learned concepts to enlighten user experience. The book helped me to think about conducting usability tests in early stages to avoid disasters, to discuss the importance of speaking user language for make user experience rich.\n","date":"2020-12-14","permalink":"https://inderpalaulakh.com/posts/my-book-donotmakemethink-post/","tags":["Book-Summary","Don’t make me think"],"title":"Book Summary: Don’t make me think - Steve Krug "}]